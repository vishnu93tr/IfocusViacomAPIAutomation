<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="1" ignored="1" total="13" passed="11">
  <reporter-output>
  </reporter-output>
  <suite name="example suite 1" duration-ms="39148" started-at="2018-03-28T07:58:05Z" finished-at="2018-03-28T07:58:44Z">
    <groups>
    </groups>
    <test name="AuthApitest" duration-ms="39148" started-at="2018-03-28T07:58:05Z" finished-at="2018-03-28T07:58:44Z">
      <class name="com.loginradius.ExcelReport">
        <test-method status="PASS" signature="excelreport()[pri:10, instance:com.loginradius.ExcelReport@21213b92]" name="excelreport" duration-ms="5851" started-at="2018-03-28T13:28:39Z" finished-at="2018-03-28T13:28:44Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- excelreport -->
      </class> <!-- com.loginradius.ExcelReport -->
      <class name="com.loginradius.CheckEmail">
        <test-method status="PASS" signature="checkemail_positive()[pri:2, instance:com.loginradius.CheckEmail@544fe44c]" name="checkemail_positive" duration-ms="4269" started-at="2018-03-28T13:28:09Z" finished-at="2018-03-28T13:28:13Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkemail_positive -->
      </class> <!-- com.loginradius.CheckEmail -->
      <class name="com.loginradius.SetPassword">
        <test-method status="PASS" signature="setpassword_positive()[pri:9, instance:com.loginradius.SetPassword@5ce81285]" name="setpassword_positive" duration-ms="3517" started-at="2018-03-28T13:28:31Z" finished-at="2018-03-28T13:28:34Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setpassword_positive -->
      </class> <!-- com.loginradius.SetPassword -->
      <class name="com.loginradius.SetUsername">
        <test-method status="PASS" signature="setusername_positive()[pri:9, instance:com.loginradius.SetUsername@78c03f1f]" name="setusername_positive" duration-ms="4346" started-at="2018-03-28T13:28:34Z" finished-at="2018-03-28T13:28:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setusername_positive -->
      </class> <!-- com.loginradius.SetUsername -->
      <class name="com.loginradius.GetAcessToken">
        <test-method status="FAIL" signature="getacesstoken()[pri:5, instance:com.loginradius.GetAcessToken@a67c67e]" name="getacesstoken" duration-ms="1866" started-at="2018-03-28T13:28:21Z" finished-at="2018-03-28T13:28:22Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[1 expectation failed.JSON path $ doesn't match.Expected: map containing ["access_token"->ANYTHING]  Actual: {error=Token field is mandatory. Please enter token}]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: 1 expectation failed.JSON path $ doesn't match.Expected: map containing ["access_token"->ANYTHING]  Actual: {error=Token field is mandatory. Please enter token}at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)at java.lang.reflect.Constructor.newInstance(Unknown Source)at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:80)at org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:74)at org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallConstructor(CallSiteArray.java:60)at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:235)at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:247)at com.jayway.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:598)at com.jayway.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)at com.jayway.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:760)at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)at java.lang.reflect.Method.invoke(Unknown Source)at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:210)at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:59)at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallCurrent(CallSiteArray.java:52)at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:154)at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:166)at com.jayway.restassured.internal.ResponseSpecificationImpl.content(ResponseSpecificationImpl.groovy:251)at com.jayway.restassured.specification.ResponseSpecification$content$1.callCurrent(Unknown Source)at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallCurrent(CallSiteArray.java:52)at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:154)at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:190)at com.jayway.restassured.internal.ResponseSpecificationImpl.body(ResponseSpecificationImpl.groovy:234)at com.jayway.restassured.internal.ValidatableResponseOptionsImpl.body(ValidatableResponseOptionsImpl.java:264)at com.loginradius.GetAcessToken.getacesstoken(GetAcessToken.java:64)at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)at java.lang.reflect.Method.invoke(Unknown Source)at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)at org.testng.internal.Invoker.invokeMethod(Invoker.java:571)at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:707)at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:979)at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)at org.testng.TestRunner.privateRun(TestRunner.java:648)at org.testng.TestRunner.run(TestRunner.java:505)at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)at org.testng.SuiteRunner.run(SuiteRunner.java:364)at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)at org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)at org.testng.TestNG.runSuitesLocally(TestNG.java:1116)at org.testng.TestNG.runSuites(TestNG.java:1028)at org.testng.TestNG.run(TestNG.java:996)at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:114)at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getacesstoken -->
      </class> <!-- com.loginradius.GetAcessToken -->
      <class name="com.loginradius.GetProfileUser">
        <test-method status="PASS" signature="getprofile_positive()[pri:7, instance:com.loginradius.GetProfileUser@4e1d422d]" name="getprofile_positive" duration-ms="1322" started-at="2018-03-28T13:28:27Z" finished-at="2018-03-28T13:28:28Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getprofile_positive -->
      </class> <!-- com.loginradius.GetProfileUser -->
      <class name="com.loginradius.KuserReg">
        <test-method status="PASS" signature="kuserreg_positive()[pri:8, instance:com.loginradius.KuserReg@52a86356]" name="kuserreg_positive" duration-ms="2063" started-at="2018-03-28T13:28:29Z" finished-at="2018-03-28T13:28:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kuserreg_positive -->
      </class> <!-- com.loginradius.KuserReg -->
      <class name="com.loginradius.EditUser">
        <test-method status="PASS" signature="edituser()[pri:4, instance:com.loginradius.EditUser@71318ec4]" name="edituser" duration-ms="4294" started-at="2018-03-28T13:28:16Z" finished-at="2018-03-28T13:28:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- edituser -->
      </class> <!-- com.loginradius.EditUser -->
      <class name="com.loginradius.Authentication">
        <test-method status="PASS" signature="authentication_positive()[pri:1, instance:com.loginradius.Authentication@2038ae61]" name="authentication_positive" duration-ms="3681" started-at="2018-03-28T13:28:05Z" finished-at="2018-03-28T13:28:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- authentication_positive -->
      </class> <!-- com.loginradius.Authentication -->
      <class name="com.loginradius.Create">
        <test-method status="PASS" signature="create_positive()[pri:3, instance:com.loginradius.Create@31610302]" name="create_positive" duration-ms="2948" started-at="2018-03-28T13:28:13Z" finished-at="2018-03-28T13:28:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- create_positive -->
      </class> <!-- com.loginradius.Create -->
      <class name="com.loginradius.GetAuthKey">
        <test-method status="PASS" signature="getauthkey_positive()[pri:6, instance:com.loginradius.GetAuthKey@3327bd23]" name="getauthkey_positive" duration-ms="4402" started-at="2018-03-28T13:28:22Z" finished-at="2018-03-28T13:28:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getauthkey_positive -->
      </class> <!-- com.loginradius.GetAuthKey -->
      <class name="com.loginradius.KuserLogin">
        <test-method status="PASS" signature="kuserlogin_positive()[pri:7, instance:com.loginradius.KuserLogin@66480dd7]" name="kuserlogin_positive" duration-ms="556" started-at="2018-03-28T13:28:28Z" finished-at="2018-03-28T13:28:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- kuserlogin_positive -->
      </class> <!-- com.loginradius.KuserLogin -->
    </test> <!-- AuthApitest -->
  </suite> <!-- example suite 1 -->
</testng-results>
